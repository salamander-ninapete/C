
#include "s21_string.h"
#include "s21_sprintf.h"
#include <stdio.h>

#test s21_memchr_test
char str1[] = "abcd";
char str2[] = "abcd";
char str3[] = "Abcd";
char str4[] = "abcd\0";
char str5[] = "abcd\0";
char str6[] = "abcd";
char str7[] = "abcd1234";
char str8[] = " ab c d 1 2 34";
char str9[] = " a c b c d 1 2 34";
char str10[] = " a c b c d 1 2 34";
char str11[] = " \n";
char str12[] = " \n";
char str13[] = " \n ";
char str14[] = "1\n ";
char str15[] = "1\n ";
char str16[] = "1\n ! @ $ ";
char str17[] = "1\n ! @ $ ";
char str18[] = "1\n\n\n\ntest";
char str19[] = "1\n \t test";
char str20[] = "1\n \t test";
char str21[] = "1\n \t test";
char str22[] = "1\n \t test";
char str23[] = "1\n \t test";
size_t num1 = 4;
size_t num2 = 0;
size_t num3 = 4;
size_t num4 = 5;
size_t num5 = 4;
size_t num6 = 4;
size_t num7 = 8;
size_t num8 = 8;
size_t num9 = 2;
size_t num10 = 3;
size_t num11 = 1;
size_t num12 = 2;
size_t num13 = 2;
size_t num14 = 2;
size_t num15 = 3;
size_t num16 = 3;
size_t num17 = 8;
size_t num18 = 10;
size_t num19 = 2;
size_t num20 = 7;
size_t num21 = 3;
size_t num22 = 5;
size_t num23 = 8;
int symbol1 = 'a';
int symbol2 = 'a';
int symbol3 = 'a';
int symbol4 = '\0';
int symbol5 = '\0';
int symbol6 = 'e';
int symbol7 = '2';
int symbol8 = ' ';
int symbol9 = 'c';
int symbol10 = 'c';
int symbol11 = '\n';
int symbol12 = '\n';
int symbol13 = ' ';
int symbol14 = ' ';
int symbol15 = ' ';
int symbol16 = '@';
int symbol17 = '@';
int symbol18 = 'e';
int symbol19 = '\t';
int symbol20 = '\t';
int symbol21 = 116;
int symbol22 = 116;
int symbol23 = 116;
ck_assert_ptr_eq(s21_memchr(str1, symbol1, num1), memchr(str1, symbol1, num1));
ck_assert_ptr_eq(s21_memchr(str2, symbol2, num2), memchr(str2, symbol2, num2));
ck_assert_ptr_eq(s21_memchr(str3, symbol3, num3), memchr(str3, symbol3, num3));
ck_assert_ptr_eq(s21_memchr(str4, symbol4, num4), memchr(str4, symbol4, num4));
ck_assert_ptr_eq(s21_memchr(str5, symbol5, num5), memchr(str5, symbol5, num5));
ck_assert_ptr_eq(s21_memchr(str6, symbol6, num6), memchr(str6, symbol6, num6));
ck_assert_ptr_eq(s21_memchr(str7, symbol7, num7), memchr(str7, symbol7, num7));
ck_assert_ptr_eq(s21_memchr(str8, symbol8, num8), memchr(str8, symbol8, num8));
ck_assert_ptr_eq(s21_memchr(str9, symbol9, num9), memchr(str9, symbol9, num9));
ck_assert_ptr_eq(s21_memchr(str10, symbol10, num10), memchr(str10, symbol10, num10));
ck_assert_ptr_eq(s21_memchr(str11, symbol11, num11), memchr(str11, symbol11, num11));
ck_assert_ptr_eq(s21_memchr(str12, symbol12, num12), memchr(str12, symbol12, num12));
ck_assert_ptr_eq(s21_memchr(str13, symbol13, num13), memchr(str13, symbol13, num13));
ck_assert_ptr_eq(s21_memchr(str14, symbol14, num14), memchr(str14, symbol14, num14));
ck_assert_ptr_eq(s21_memchr(str15, symbol15, num15), memchr(str15, symbol15, num15));
ck_assert_ptr_eq(s21_memchr(str16, symbol16, num16), memchr(str16, symbol16, num16));
ck_assert_ptr_eq(s21_memchr(str17, symbol17, num17), memchr(str17, symbol17, num17));
ck_assert_ptr_eq(s21_memchr(str18, symbol18, num18), memchr(str18, symbol18, num18));
ck_assert_ptr_eq(s21_memchr(str19, symbol19, num19), memchr(str19, symbol19, num19));
ck_assert_ptr_eq(s21_memchr(str20, symbol20, num20), memchr(str20, symbol20, num20));
ck_assert_ptr_eq(s21_memchr(str21, symbol21, num21), memchr(str21, symbol21, num21));
ck_assert_ptr_eq(s21_memchr(str22, symbol22, num22), memchr(str22, symbol22, num22));
ck_assert_ptr_eq(s21_memchr(str23, symbol23, num23), memchr(str23, symbol23, num23));

#test s21_memcmp_tests
char str1[] = "abcd";
char str1_[] = "abcd";
char str2[] = "";
char str2_[] = "";
char str3[] = "";
char str3_[] = "";
char str4[] = "";
char str4_[] = "abcd";
char str5_[] = "abcd";
char str5[] = "    abcd";
char str6[] = "abcd";
char str6_[] = "    abcd";
char str7[] = "abcd";
char str7_[] = "\nabcd";
char str8[] = "abcd";
char str8_[] = "abcd\n";
char str9[] = "\tabcd";
char str9_[] = "abcd\n";
char str10[] = "\t abcd";
char str10_[] = "\t dbcd";
char str11[] = "\n\t \nabcd";
char str11_[] = "\n\t abcd";
char str12[] = "  @\t ab%cd";
char str12_[] = "  @\t ab%cD";
char str13[] = "aBcd";
char str13_[] = "abcd";
char str14[] = "aBCd";
char str14_[] = "aBcd";
char str15[] = "aBCd \n \n \n ";
char str15_[] = "aBcd  \n \n \n";
char str16[] = "qweRTY";
char str16_[] = "QWErty";
char str17[] = "qweRTY";
char str17_[] = "qwerty";
char str18[] = "qwerty ";
char str18_[] = "qwerty";
char str19[] = "qwerty";
char str19_[] = "qwerty ";
char str20[] = "qwerty";
char str20_[] = "qwerty";
size_t num1 = 4;
size_t num2 = 0;
size_t num3 = 1;
size_t num4 = 1;
size_t num5 = 4;
size_t num6 = 4;
size_t num7 = 4;
size_t num8 = 5;
size_t num9 = 5;
size_t num10 = 5;
size_t num11 = 7;
size_t num12 = 10;
size_t num13 = 4;
size_t num14 = 4;
size_t num15 = 10;
size_t num16 = 6;
size_t num17 = 6;
size_t num18 = 7;
size_t num19 = 7;
size_t num20 = 6;
ck_assert_int_eq(s21_memcmp(str1, str1_, num1), memcmp(str1, str1_, num1));
ck_assert_int_eq(s21_memcmp(str2, str2_, num2), memcmp(str2, str2_, num2));
ck_assert_int_eq(s21_memcmp(str3, str3_, num3), memcmp(str3, str3_, num3));
ck_assert_int_eq(s21_memcmp(str4, str4_, num4), memcmp(str4, str4_, num4));
ck_assert_int_eq(s21_memcmp(str5, str5_, num5), memcmp(str5, str5_, num5));
ck_assert_int_eq(s21_memcmp(str6, str6_, num6), memcmp(str6, str6_, num6));
ck_assert_int_eq(s21_memcmp(str7, str7_, num7), memcmp(str7, str7_, num7));
ck_assert_int_eq(s21_memcmp(str8, str8_, num8), memcmp(str8, str8_, num8));
ck_assert_int_eq(s21_memcmp(str9, str9_, num9), memcmp(str9, str9_, num9));
ck_assert_int_eq(s21_memcmp(str10, str10_, num10), memcmp(str10, str10_, num10));
ck_assert_int_eq(s21_memcmp(str11, str11_, num11), memcmp(str11, str11_, num11));
ck_assert_int_eq(s21_memcmp(str12, str12_, num12), memcmp(str12, str12_, num12));
ck_assert_int_eq(s21_memcmp(str13, str13_, num13), memcmp(str13, str13_, num13));
ck_assert_int_eq(s21_memcmp(str14, str14_, num14), memcmp(str14, str14_, num14));
ck_assert_int_eq(s21_memcmp(str15, str15_, num15), memcmp(str15, str15_, num15));
ck_assert_int_eq(s21_memcmp(str16, str16_, num16), memcmp(str16, str16_, num16));
ck_assert_int_eq(s21_memcmp(str17, str17_, num17), memcmp(str17, str17_, num17));
ck_assert_int_eq(s21_memcmp(str18, str18_, num18), memcmp(str18, str18_, num18));
ck_assert_int_eq(s21_memcmp(str19, str19_, num19), memcmp(str19, str19_, num19));
ck_assert_int_eq(s21_memcmp(str20, str20_, num20), memcmp(str20, str20_, num20));
  
  #test s21_memcpy_tests
char str1[10] = {0};
char str1_[] = "qwerty";
char str2[10] = {0};
char str2_[] = "qwerty";
char str3[10] = {0};
char str3_[] = "";
char str4[10] = {0};
char str4_[] = "";
char str5[10] = {0};
char str5_[] = "abcdef";
char str6[10] = {0};
char str6_[] = "\n\n\n\n";
char str7[10] = {0};
char str7_[] = "\t\n";
char str8[10] = {0};
char str8_[] = " ";
char str9[10] = {0};
char str9_[] = " ";
char str10[10] = {0};
char str10_[] = " abcdefgh ";
char str11[10] = {0};
char str11_[] = " abcdefgh ";
char str12[10] = {0};
char str12_[] = " abcde\nfgh ";
char str13[10] = {0};
char str13_[] = "abcde\n\tfgh ";
char str14[10] = {0};
char str14_[] = "123456";
char str15[10] = {0};
char str15_[] = "123456";
size_t num1 = 3;
size_t num2 = 6;
size_t num3 = 0;
size_t num4 = 1;
size_t num5 = 7;
size_t num6 = 4;
size_t num7 = 2;
size_t num8 = 1;
size_t num9 = 2;
size_t num10 = 10;
size_t num11 = 0;
size_t num12 = 8;
size_t num13 = 9;
size_t num14 = 1;
size_t num15 = 6;
ck_assert_ptr_eq(s21_memcpy(str1, str1_, num1), memcpy(str1, str1_, num1));
ck_assert_ptr_eq(s21_memcpy(str2, str2_, num2), memcpy(str2, str2_, num2));
ck_assert_ptr_eq(s21_memcpy(str3, str3_, num3), memcpy(str3, str3_, num3));
ck_assert_ptr_eq(s21_memcpy(str4, str4_, num4), memcpy(str4, str4_, num4));
ck_assert_ptr_eq(s21_memcpy(str5, str5_, num5), memcpy(str5, str5_, num5));
ck_assert_ptr_eq(s21_memcpy(str6, str6_, num6), memcpy(str6, str6_, num6));
ck_assert_ptr_eq(s21_memcpy(str7, str7_, num7), memcpy(str7, str7_, num7));
ck_assert_ptr_eq(s21_memcpy(str8, str8_, num8), memcpy(str8, str8_, num8));
ck_assert_ptr_eq(s21_memcpy(str9, str9_, num9), memcpy(str9, str9_, num9));
ck_assert_ptr_eq(s21_memcpy(str10, str10_, num10), memcpy(str10, str10_, num10));
ck_assert_ptr_eq(s21_memcpy(str11, str11_, num11), memcpy(str11, str11_, num11));
ck_assert_ptr_eq(s21_memcpy(str12, str12_, num12), memcpy(str12, str12_, num12));
ck_assert_ptr_eq(s21_memcpy(str13, str13_, num13), memcpy(str13, str13_, num13));
ck_assert_ptr_eq(s21_memcpy(str14, str14_, num14), memcpy(str14, str14_, num14));
ck_assert_ptr_eq(s21_memcpy(str15, str15_, num15), memcpy(str15, str15_, num15));

#test s21_memset_test
char str1[] = "abcde";
char str2[] = "abcde";
char str3[] = "";
char str4[] = "abcdef";
char str5[] = "abcdef";
char str6[] = "abcdef";
char str7[] = "abcdef";
char str8[] = "abcdef";
char str9[] = "abcdef§-74y7 t§497t§4h §§-hg =§";
char str10[] = "abcdef";
int symbol1 = '1';
int symbol2 = '1';
int symbol3 = '1';
int symbol4 = '\n';
int symbol5 = '\t';
int symbol6 = ' ';
int symbol7 = '!';
int symbol8 = 'o';
int symbol9 = '-';
int symbol10 = '0';
size_t num1 = 5;
size_t num2 = 1;
size_t num3 = 1;
size_t num4 = 3;
size_t num5 = 2;
size_t num6 = 5;
size_t num7 = 3;
size_t num8 = 4;
size_t num9 = 15;
size_t num10 = 0;
ck_assert_ptr_eq(s21_memset(str1, symbol1, num1), memset(str1, symbol1, num1));
ck_assert_ptr_eq(s21_memset(str2, symbol2, num2), memset(str2, symbol2, num2));
ck_assert_ptr_eq(s21_memset(str3, symbol3, num3), memset(str3, symbol3, num3));
ck_assert_ptr_eq(s21_memset(str4, symbol4, num4), memset(str4, symbol4, num4));
ck_assert_ptr_eq(s21_memset(str5, symbol5, num5), memset(str5, symbol5, num5));
ck_assert_ptr_eq(s21_memset(str6, symbol6, num6), memset(str6, symbol6, num6));
ck_assert_ptr_eq(s21_memset(str7, symbol7, num7), memset(str7, symbol7, num7));
ck_assert_ptr_eq(s21_memset(str8, symbol8, num8), memset(str8, symbol8, num8));
ck_assert_ptr_eq(s21_memset(str9, symbol9, num9), memset(str9, symbol9, num9));
ck_assert_ptr_eq(s21_memset(str10, symbol10, num10), memset(str10, symbol10, num10));

#test strncat_test
char t_1[4] = "<<<\0";
char t_2[2] = "5\0";
char t_3[2] = "5\0";
char t_4[] = "\0";

ck_assert_str_eq(s21_strncat(t_1, t_2, 1), "<<<5\0");
ck_assert_str_eq(s21_strncat(t_3, t_4, 0), strncat(t_2, t_4, 0));

#test strchr_test
char str1[] = "Abcdefg";
char str2[] = "Abcdefg";

int symbol1 = 'd';
int symbol2 = 'd';

char *ach1 = s21_strchr(str1, symbol1);
char *ach2 = strchr(str2, symbol2);

ck_assert_str_eq(ach1, "defg");
ck_assert_str_eq(ach1, ach2);
ck_assert_str_eq(str1, str2);

#test strncmp_test
char t_1[] = "Hello World 1";
char t_2[] = "Hella Worda 2";

ck_assert_int_eq(s21_strncmp(t_1, t_2, 13) < 0, strncmp(t_1, t_2, 13) < 0);
ck_assert_int_eq(s21_strncmp(t_1, t_2, 4) == 0, strncmp(t_1, t_2, 4) == 0);

#test strncpy_test
char src[] = "\0";
char res[] = "\0";
char exp[] = "\0";
char src1[] = "123\0";
char res1[] = "123\0";
char exp1[] = "123\0";
char src2[] = "13\0";
char res2[] = "13\0";
char exp2[] = "13\0";

s21_size_t n_byte = 0;
s21_size_t n1_byte = 0;
s21_size_t n2_byte = 4;

s21_strncpy(res, src, n_byte);
s21_strncpy(res1, src1, n1_byte);
s21_strncpy(res2, src2, n2_byte);

strncpy(exp, src, n_byte);
strncpy(exp1, src1, n1_byte);
strncpy(exp2, src2, n2_byte);

ck_assert_str_eq(res, exp);
ck_assert_str_eq(res1, exp1);
ck_assert_str_eq(res2, exp2);

#test strcspn_test
char t_1[] = "12314241";
char t_2[] = "fffff";
char t_3[] = "//\0\n";
char t_4[] = "goga";
char t_5[] = "22222111111111";
char t_6[] = "22222111111111";

ck_assert_uint_eq(s21_strcspn(t_1, t_2), strcspn(t_1, t_2));
ck_assert_uint_eq(s21_strcspn(t_2, t_3), strcspn(t_2, t_3));
ck_assert_uint_eq(s21_strcspn(t_4, t_3), strcspn(t_4, t_3));
ck_assert_uint_eq(s21_strcspn(t_5, t_4), strcspn(t_5, t_4));
ck_assert_uint_eq(s21_strcspn(t_5, t_6), strcspn(t_5, t_6));

#test strlen_test
char t_1[] = "12312\0";
char t_2[] = "//\0\n\0";
char t_3[] = "dfdfd11\0";
char t_4[] = "\0";
char t_5[] = "\0";
char t_6[] = "'f'f1213/v/f/////\0";
char t_7[] = "";
char t_8[] = " ";
char t_9[] = "@#$%6&*()\n\t";

ck_assert_int_eq(s21_strlen(t_1), strlen(t_1));
ck_assert_int_eq(s21_strlen(t_2), strlen(t_2));
ck_assert_int_eq(s21_strlen(t_3), strlen(t_3));
ck_assert_int_eq(s21_strlen(t_4), strlen(t_4));
ck_assert_int_eq(s21_strlen(t_5), strlen(t_5));
ck_assert_int_eq(s21_strlen(t_6), strlen(t_6));
ck_assert_int_eq(s21_strlen(t_7), strlen(t_7));
ck_assert_int_eq(s21_strlen(t_8), strlen(t_8));
ck_assert_int_eq(s21_strlen(t_9), strlen(t_9));

#test strpbrk_test
char t_1[] = "01234ffffff";
char t_2[] = "7773";
char *str = "Hello, world";
char *empty = "";

ck_assert_str_eq(s21_strpbrk(t_1, t_2), "34ffffff");
ck_assert_str_eq(s21_strpbrk(t_1, t_2), strpbrk(t_1, t_2));

ck_assert_ptr_eq(s21_strpbrk(str, empty), NULL);
ck_assert_uint_eq((unsigned long)s21_strpbrk(str, empty),
                  (unsigned long)strpbrk(str, empty));

#test strrchr_test
char t_1[] = "0163456769";
char t_2[] = ";;;;;;H%%//#HH";
char t_3[] = " /";

ck_assert_uint_eq((unsigned long)s21_strrchr(t_1, '6'),
                  (unsigned long)strrchr(t_1, '6'));
ck_assert_uint_eq((unsigned long)s21_strrchr(t_1, ' '),
                  (unsigned long)strrchr(t_1, ' '));
ck_assert_uint_eq((unsigned long)s21_strrchr(t_1, '6'),
                  (unsigned long)strrchr(t_1, '6'));
ck_assert_uint_eq((unsigned long)s21_strrchr(t_2, 'H'),
                  (unsigned long)strrchr(t_2, 'H'));
ck_assert_uint_eq((unsigned long)s21_strrchr(t_2, '$'),
                  (unsigned long)strrchr(t_2, '$'));
ck_assert_uint_eq((unsigned long)s21_strrchr(t_2, ';'),
                  (unsigned long)strrchr(t_2, ';'));
ck_assert_uint_eq((unsigned long)s21_strrchr(t_3, ' '),
                  (unsigned long)strrchr(t_3, ' '));
ck_assert_str_eq(s21_strrchr(t_2, '\0'), strrchr(t_2, '\0'));

#test strstr_test
char t_1[] = "<<<5>>>";
char t_2[] = "5";
char t_3[] = "QwertyQwertyQwerty";
char t_4[] = "Qwerty";
char t_5[] = "abcd";
char t_6[] = "";
char t_7[] = "aaaaa123aaa1234aaa";
char t_8[] = "1234";

ck_assert_ptr_eq(s21_strstr(t_1, t_2), strstr(t_1, t_2));
ck_assert_ptr_eq(s21_strstr(t_3, t_4), strstr(t_3, t_4));
ck_assert_ptr_eq(s21_strstr(t_5, t_6), strstr(t_5, t_6));
ck_assert_ptr_eq(s21_strstr(t_4, t_5), strstr(t_4, t_5));
ck_assert_ptr_eq(s21_strstr(t_7, t_8), strstr(t_7, t_8));

#test strtok_test
char str_strtok1[] = "one/two/three(four)five";
char str_strtok2[] = "one/two/three(four)five";
char str_strtok3[] = " ";
char str_strtok4[] = " ";
char str_strtok5[] = "GqwerGqwer";
char str_strtok6[] = "GqwerGqwer";

char delim1[] = "/()";
char delim2[] = "/()";
char delim3[] = " ";
char delim4[] = "G";

char *my_strtok = s21_strtok(str_strtok1, delim1);
char *origin_strtok = strtok(str_strtok2, delim2);

char *str = s21_strtok(str_strtok3, delim3);
char *orig_str = strtok(str_strtok4, delim3);
char *str1 = s21_strtok(str_strtok5, delim4);
char *orig_str1 = strtok(str_strtok6, delim4);

ck_assert_ptr_eq(str, orig_str);
ck_assert_str_eq(str1, orig_str1);

while (my_strtok != NULL) {
  ck_assert_str_eq(my_strtok, origin_strtok);
  my_strtok = s21_strtok(NULL, delim1);
  origin_strtok = strtok(NULL, delim2);
}

#test upper_test
const char t_1[] = "WOrld Of PEAse";
char *new_str = s21_to_upper(t_1);
if (new_str) {
  ck_assert_str_eq(new_str, "WORLD OF PEASE");
  free(new_str);
}

#test lower_test
const char t_1[] = "WOrld Of PEAse";
char *new_str = s21_to_lower(t_1);
if (new_str) {
  ck_assert_str_eq(new_str, "world of pease");
  free(new_str);
}

#test trim_test

char str_trim[] = "\t55 ! Hello World ! ,,55\t";
char t_1[] = "\t ! \0";
char t_2[] = "\t !,Hd 55 \0";
char *str = s21_trim(str_trim, t_1);

if (str) {
  ck_assert_str_eq(str, "55 ! Hello World ! ,,55");
  free(str);
}
str = s21_trim(str_trim, t_2);
if (str) {
  ck_assert_str_eq(str, "ello Worl\0");
  free(str);
}

#test insert_test

char *src = "Hello!!";
char *str = " World!";
char str1[] = "abcd";
char str2[] = "123";
char *result1 = NULL;
char *result2 = NULL;
char *result3 = NULL;
char *result4 = NULL;
char *result5 = NULL;
char *new_str = {'\0'};
new_str = s21_insert(src, "", 40);
ck_assert_ptr_eq(new_str, NULL);
new_str = s21_insert(src, str, -1);
ck_assert_ptr_eq(new_str, NULL);
result1 = s21_insert(str1, str2, 1);
result2 = s21_insert(str1, str2, 5);
result3 = s21_insert(str1, str2, 4);
result4 = s21_insert(str1, str2, 2);
result5 = s21_insert(str1, str2, 3);
ck_assert_str_eq(result1, "a123bcd");
free(result1);
ck_assert_ptr_null(result2);
free(result2);
ck_assert_str_eq(result3, "abcd123");
free(result3);
ck_assert_str_eq(result4, "ab123cd");
free(result4);
ck_assert_str_eq(result5, "abc123d");
free(result5);

#test sprintf_d_test
char str[80] = {'\0'};
char str_orig[80] = {'\0'};
int d = 228;

int res_1 = s21_sprintf(str, "%10.5d", d);
int res_1_orig = sprintf(str_orig, "%10.5d", d);
ck_assert_int_eq(res_1, res_1_orig);
ck_assert_str_eq(str, str_orig);

int res_2 = s21_sprintf(str, "% 10.5d", d);
int res_2_orig = sprintf(str_orig, "% 10.5d", d);
ck_assert_int_eq(res_2, res_2_orig);
ck_assert_str_eq(str, str_orig);

int res_3 = s21_sprintf(str, "%3.5d", d);
int res_3_orig = sprintf(str_orig, "%3.5d", d);
ck_assert_int_eq(res_3, res_3_orig);
ck_assert_str_eq(str, str_orig);

int res_4 = s21_sprintf(str, "%d", d);
int res_4_orig = sprintf(str_orig, "%d", d);
ck_assert_int_eq(res_4, res_4_orig);
ck_assert_str_eq(str, str_orig);

int res_5 = s21_sprintf(str, "%0d", d);
int res_5_orig = sprintf(str_orig, "%0d", d);
ck_assert_int_eq(res_5, res_5_orig);
ck_assert_str_eq(str, str_orig);

int res_6 = s21_sprintf(str, "%-d", d);
int res_6_orig = sprintf(str_orig, "%-d", d);
ck_assert_int_eq(res_6, res_6_orig);
ck_assert_str_eq(str, str_orig);

int res_7 = s21_sprintf(str, "%+d", d);
int res_7_orig = sprintf(str_orig, "%+d", d);
ck_assert_int_eq(res_7, res_7_orig);
ck_assert_str_eq(str, str_orig);

int res_8 = s21_sprintf(str, "% d", d);
int res_8_orig = sprintf(str_orig, "% d", d);
ck_assert_int_eq(res_8, res_8_orig);
ck_assert_str_eq(str, str_orig);

int res_9 = s21_sprintf(str, "%5d", d);
int res_9_orig = sprintf(str_orig, "%5d", d);
ck_assert_int_eq(res_9, res_9_orig);
ck_assert_str_eq(str, str_orig);

int res_10 = s21_sprintf(str, "%-5d", d);
int res_10_orig = sprintf(str_orig, "%-5d", d);
ck_assert_int_eq(res_10, res_10_orig);
ck_assert_str_eq(str, str_orig);

int res_11 = s21_sprintf(str, "%+5d", d);
int res_11_orig = sprintf(str_orig, "%+5d", d);
ck_assert_int_eq(res_11, res_11_orig);
ck_assert_str_eq(str, str_orig);

int res_12 = s21_sprintf(str, "% 5d", d);
int res_12_orig = sprintf(str_orig, "% 5d", d);
ck_assert_int_eq(res_12, res_12_orig);
ck_assert_str_eq(str, str_orig);

int res_13 = s21_sprintf(str, "%.5d", d);
int res_13_orig = sprintf(str_orig, "%.5d", d);
ck_assert_int_eq(res_13, res_13_orig);
ck_assert_str_eq(str, str_orig);

#test sprintf_c_test
char str[80] = {'\0'};
char str_orig[80] = {'\0'};
char A = 'A';

int res_1 = s21_sprintf(str, "%c", A);
int res_1_orig = sprintf(str_orig, "%c", A);
ck_assert_int_eq(res_1, res_1_orig);
ck_assert_str_eq(str, str_orig);

int res_2 = s21_sprintf(str, "%-c", A);
int res_2_orig = sprintf(str_orig, "%-c", A);
ck_assert_int_eq(res_2, res_2_orig);
ck_assert_str_eq(str, str_orig);

int res_3 = s21_sprintf(str, "%10c", A);
int res_3_orig = sprintf(str_orig, "%10c", A);
ck_assert_int_eq(res_3, res_3_orig);
ck_assert_str_eq(str, str_orig);

int res_4 = s21_sprintf(str, "%-2c", A);
int res_4_orig = sprintf(str_orig, "%-2c", A);
ck_assert_int_eq(res_4, res_4_orig);
ck_assert_str_eq(str, str_orig);

#test sprintf_s_test
char str[80] = {'\0'};
char str_orig[80] = {'\0'};
char *A = "Ochko";

int res_1 = s21_sprintf(str, "%s", A);
int res_1_orig = sprintf(str_orig, "%s", A);
ck_assert_int_eq(res_1, res_1_orig);
ck_assert_str_eq(str, str_orig);

int res_2 = s21_sprintf(str, "%-s", A);
int res_2_orig = sprintf(str_orig, "%-s", A);
ck_assert_int_eq(res_2, res_2_orig);
ck_assert_str_eq(str, str_orig);

int res_3 = s21_sprintf(str, "%10s", A);
int res_3_orig = sprintf(str_orig, "%10s", A);
ck_assert_int_eq(res_3, res_3_orig);
ck_assert_str_eq(str, str_orig);

int res_4 = s21_sprintf(str, "%.5s", A);
int res_4_orig = sprintf(str_orig, "%.5s", A);
ck_assert_int_eq(res_4, res_4_orig);
ck_assert_str_eq(str, str_orig);

int res_5 = s21_sprintf(str, "%-10s", A);
int res_5_orig = sprintf(str_orig, "%-10s", A);
ck_assert_int_eq(res_5, res_5_orig);
ck_assert_str_eq(str, str_orig);
#test sprintf_ld_test
char str[80] = {'\0'};
char str_orig[80] = {'\0'};
long int d = 1504389565748;

int res_1 = s21_sprintf(str, "%10.5ld", d);
int res_1_orig = sprintf(str_orig, "%10.5ld", d);
ck_assert_int_eq(res_1, res_1_orig);
ck_assert_str_eq(str, str_orig);

int res_2 = s21_sprintf(str, "% 10.5ld", d);
int res_2_orig = sprintf(str_orig, "% 10.5ld", d);
ck_assert_int_eq(res_2, res_2_orig);
ck_assert_str_eq(str, str_orig);

int res_3 = s21_sprintf(str, "%3.5ld", d);
int res_3_orig = sprintf(str_orig, "%3.5ld", d);
ck_assert_int_eq(res_3, res_3_orig);
ck_assert_str_eq(str, str_orig);

int res_4 = s21_sprintf(str, "%ld", d);
int res_4_orig = sprintf(str_orig, "%ld", d);
ck_assert_int_eq(res_4, res_4_orig);
ck_assert_str_eq(str, str_orig);

int res_5 = s21_sprintf(str, "%-ld", d);
int res_5_orig = sprintf(str_orig, "%-ld", d);
ck_assert_int_eq(res_5, res_5_orig);
ck_assert_str_eq(str, str_orig);

int res_6 = s21_sprintf(str, "%+ld", d);
int res_6_orig = sprintf(str_orig, "%+ld", d);
ck_assert_int_eq(res_6, res_6_orig);
ck_assert_str_eq(str, str_orig);

int res_7 = s21_sprintf(str, "% ld", d);
int res_7_orig = sprintf(str_orig, "% ld", d);
ck_assert_int_eq(res_7, res_7_orig);
ck_assert_str_eq(str, str_orig);

int res_8 = s21_sprintf(str, "%5ld", d);
int res_8_orig = sprintf(str_orig, "%5ld", d);
ck_assert_int_eq(res_8, res_8_orig);
ck_assert_str_eq(str, str_orig);

int res_9 = s21_sprintf(str, "%-5ld", d);
int res_9_orig = sprintf(str_orig, "%-5ld", d);
ck_assert_int_eq(res_9, res_9_orig);
ck_assert_str_eq(str, str_orig);

int res_10 = s21_sprintf(str, "%+5ld", d);
int res_10_orig = sprintf(str_orig, "%+5ld", d);
ck_assert_int_eq(res_10, res_10_orig);
ck_assert_str_eq(str, str_orig);

int res_11 = s21_sprintf(str, "% 5ld", d);
int res_11_orig = sprintf(str_orig, "% 5ld", d);
ck_assert_int_eq(res_11, res_11_orig);
ck_assert_str_eq(str, str_orig);

int res_12 = s21_sprintf(str, "%.5ld", d);
int res_12_orig = sprintf(str_orig, "%.5ld", d);
ck_assert_int_eq(res_12, res_12_orig);
ck_assert_str_eq(str, str_orig);

#test sprintf_u_test
char str[80] = {'\0'};
char str_orig[80] = {'\0'};
unsigned int u = 228;

int res_1 = s21_sprintf(str, "%10.5u", u);
int res_1_orig = sprintf(str_orig, "%10.5u", u);
ck_assert_int_eq(res_1, res_1_orig);
ck_assert_str_eq(str, str_orig);

int res_2 = s21_sprintf(str, "%-10.5u", u);
int res_2_orig = sprintf(str_orig, "%-10.5u", u);
ck_assert_int_eq(res_2, res_2_orig);
ck_assert_str_eq(str, str_orig);

int res_3 = s21_sprintf(str, "%3.5u", u);
int res_3_orig = sprintf(str_orig, "%3.5u", u);
ck_assert_int_eq(res_3, res_3_orig);
ck_assert_str_eq(str, str_orig);

int res_4 = s21_sprintf(str, "%u", u);
int res_4_orig = sprintf(str_orig, "%u", u);
ck_assert_int_eq(res_4, res_4_orig);
ck_assert_str_eq(str, str_orig);

int res_5 = s21_sprintf(str, "%u", u);
int res_5_orig = sprintf(str_orig, "%u", u);
ck_assert_int_eq(res_5, res_5_orig);
ck_assert_str_eq(str, str_orig);

int res_6 = s21_sprintf(str, "%5u", u);
int res_6_orig = sprintf(str_orig, "%5u", u);
ck_assert_int_eq(res_6, res_6_orig);
ck_assert_str_eq(str, str_orig);

int res_7 = s21_sprintf(str, "%-5u", u);
int res_7_orig = sprintf(str_orig, "%-5u", u);
ck_assert_int_eq(res_7, res_7_orig);
ck_assert_str_eq(str, str_orig);

int res_8 = s21_sprintf(str, "%10.5u", u);
int res_8_orig = sprintf(str_orig, "%10.5u", u);
ck_assert_int_eq(res_8, res_8_orig);
ck_assert_str_eq(str, str_orig);

int res_9 = s21_sprintf(str, "%.5u", u);
int res_9_orig = sprintf(str_orig, "%.5u", u);
ck_assert_int_eq(res_9, res_9_orig);
ck_assert_str_eq(str, str_orig);

#test sprintf_dsucf_sprintf_test
char str[2048] = {'\0'};
char str_orig[2048] = {'\0'};
char s[] = "chfbjkds\0";
char s2[] = "qwerty\0";
short int d = 19555;
long int d2 = 1504389565748;
int d3 = -190;
unsigned short int us = 10443;
unsigned long int ul = 5665465454;
char c = 'A';
float f = 1.0004;
float f2 = -228;
float f3 = 1.0;
const char format[10000] =
    "1234 x %+-5.3hd x %+-20.15ld x % 10.6d x %-5s x %-10.3s x %-5.7hu x "
    "%-10.2lu x %-5c x %c x % -5.2f x %10.5f x %.f x %10f";
int res_1 =
    s21_sprintf(str, format, d, d2, d3, s, s2, us, ul, c, c, f, f2, f3, f3);
int res_1_orig =
    sprintf(str_orig, format, d, d2, d3, s, s2, us, ul, c, c, f, f2, f3, f3);
ck_assert_int_eq(res_1, res_1_orig);
ck_assert_str_eq(str, str_orig);

#test test_proc
char buf1[100];
char buf2[100];
sprintf(buf1, "%%");
s21_sprintf(buf2, "%%");
ck_assert_str_eq(buf1, buf2);

#test test_simple

char buf2[100];
char buf3[100];
char buf4[100];
char buf5[100];
char buf6[100];
char buf7[100];
char buf8[100];
char buf9[100];
char buf10[100];
char buf11[100];

char buf2_[100];
char buf3_[100];
char buf4_[100];
char buf5_[100];
char buf6_[100];
char buf7_[100];
char buf8_[100];
char buf9_[100];
char buf10_[100];
char buf11_[100];

sprintf(buf2, "%g", 0.000000001);
s21_sprintf(buf2_, "%g", 0.000000001);
sprintf(buf3, "%G", 0.000000001);
s21_sprintf(buf3_, "%G", 0.000000001);
sprintf(buf4, "%e", 123456789.123456789);
s21_sprintf(buf4_, "%e", 123456789.123456789);
sprintf(buf5, "%E", 123456789.123456789);
s21_sprintf(buf5_, "%E", 123456789.123456789);
sprintf(buf6, "%x", 0xabcdef);
s21_sprintf(buf6_, "%x", 0xabcdef);
sprintf(buf7, "%X", 0xABCDEF);
s21_sprintf(buf7_, "%X", 0xABCDEF);
sprintf(buf8, "%x", 0xABCDEF);
s21_sprintf(buf8_, "%x", 0xABCDEF);
sprintf(buf9, "%X", 0xabcdef);
s21_sprintf(buf9_, "%X", 0xabcdef);
sprintf(buf10, "%o", 20);
s21_sprintf(buf10_, "%o", 20);

double number = 123456789.123456789;
void *ptr = &number;
sprintf(buf11, "%p", ptr);
s21_sprintf(buf11_, "%p", ptr);

ck_assert_str_eq(buf2, buf2_);
ck_assert_str_eq(buf3, buf3_);
ck_assert_str_eq(buf4, buf4_);
ck_assert_str_eq(buf5, buf5_);
ck_assert_str_eq(buf6, buf6_);
ck_assert_str_eq(buf7, buf7_);
ck_assert_str_eq(buf8, buf8_);
ck_assert_str_eq(buf9, buf9_);
ck_assert_str_eq(buf10, buf10_);
ck_assert_str_eq(buf11, buf11_);

#test test_complex_e
char buf1[100];
char buf2[100];
char buf3[100];
char buf4[100];
char buf1_[100];
char buf2_[100];
char buf3_[100];
char buf4_[100];
sprintf(buf1, "%*.e", 10, 123456789.123456789);
s21_sprintf(buf1_, "%*.e", 10, 123456789.123456789);
sprintf(buf2, "%.*e", 5, 123456789.123456789);
s21_sprintf(buf2_, "%.*e", 5, 123456789.123456789);
sprintf(buf3, "%*.*e", 10, 5, 123456789.123456789);
s21_sprintf(buf3_, "%*.*e", 10, 5, 123456789.123456789);
sprintf(buf4, "%020e", 123456789.123456789);
s21_sprintf(buf4_, "%020e", 123456789.123456789);
ck_assert_str_eq(buf1, buf1_);
ck_assert_str_eq(buf2, buf2_);
ck_assert_str_eq(buf3, buf3_);
ck_assert_str_eq(buf4, buf4_);

#test test_complex_E
char buf1[100];
char buf2[100];
char buf3[100];
char buf4[100];
char buf1_[100];
char buf2_[100];
char buf3_[100];
char buf4_[100];
sprintf(buf1, "%*.E", 10, 123456789.123456789);
s21_sprintf(buf1_, "%*.E", 10, 123456789.123456789);
sprintf(buf2, "%.*E", 5, 123456789.123456789);
s21_sprintf(buf2_, "%.*E", 5, 123456789.123456789);
sprintf(buf3, "%*.*E", 10, 5, 123456789.123456789);
s21_sprintf(buf3_, "%*.*E", 10, 5, 123456789.123456789);
sprintf(buf4, "%020E", 123456789.123456789);
s21_sprintf(buf4_, "%020E", 123456789.123456789);
ck_assert_str_eq(buf1, buf1_);
ck_assert_str_eq(buf2, buf2_);
ck_assert_str_eq(buf3, buf3_);
ck_assert_str_eq(buf4, buf4_);

#test test_complex_x
char buf1[100];
char buf2[100];
char buf3[100];
char buf4[100];
char buf5[100];
char buf6[100];
char buf1_[100];
char buf2_[100];
char buf3_[100];
char buf4_[100];
char buf5_[100];
char buf6_[100];
sprintf(buf1, "%*.x", 10, 0xabcdef);
s21_sprintf(buf1_, "%*.x", 10, 0xabcdef);
sprintf(buf2, "%.*x", 5, 0xabcdef);
s21_sprintf(buf2_, "%.*x", 5, 0xabcdef);
sprintf(buf3, "%*.*x", 10, 5, 0xabcdef);
s21_sprintf(buf3_, "%*.*x", 10, 5, 0xabcdef);
sprintf(buf4, "%020x", 0xabcdef);
s21_sprintf(buf4_, "%020x", 0xabcdef);
sprintf(buf5, "%#x", 0xabcdef);
s21_sprintf(buf5_, "%#x", 0xabcdef);
sprintf(buf6, "%#x", 0XABCDEF);
s21_sprintf(buf6_, "%#x", 0XABCDEF);
ck_assert_str_eq(buf1, buf1_);
ck_assert_str_eq(buf2, buf2_);
ck_assert_str_eq(buf3, buf3_);
ck_assert_str_eq(buf4, buf4_);
ck_assert_str_eq(buf5, buf5_);
ck_assert_str_eq(buf6, buf6_);

#test test_complex_X
char buf1[100];
char buf2[100];
char buf3[100];
char buf4[100];
char buf5[100];
char buf6[100];
char buf1_[100];
char buf2_[100];
char buf3_[100];
char buf4_[100];
char buf5_[100];
char buf6_[100];
sprintf(buf1, "%*.X", 10, 0XABCDEF);
s21_sprintf(buf1_, "%*.X", 10, 0XABCDEF);
sprintf(buf2, "%.*X", 5, 0XABCDEF);
s21_sprintf(buf2_, "%.*X", 5, 0XABCDEF);
sprintf(buf3, "%*.*X", 10, 5, 0XABCDEF);
s21_sprintf(buf3_, "%*.*X", 10, 5, 0XABCDEF);
sprintf(buf4, "%020X", 0XABCDEF);
s21_sprintf(buf4_, "%020X", 0XABCDEF);
sprintf(buf5, "%#X", 0XABCDEF);
s21_sprintf(buf5_, "%#X", 0XABCDEF);
sprintf(buf6, "%#X", 0xabcdef);
s21_sprintf(buf6_, "%#X", 0xabcdef);
ck_assert_str_eq(buf1, buf1_);
ck_assert_str_eq(buf2, buf2_);
ck_assert_str_eq(buf3, buf3_);
ck_assert_str_eq(buf4, buf4_);
ck_assert_str_eq(buf5, buf5_);
ck_assert_str_eq(buf6, buf6_);

#test test_complex_o
char buf1[100];
char buf2[100];
char buf3[100];
char buf4[100];
char buf5[100];
char buf1_[100];
char buf2_[100];
char buf3_[100];
char buf4_[100];
char buf5_[100];
sprintf(buf1, "%*.o", 10, 20);
s21_sprintf(buf1_, "%*.o", 10, 20);
sprintf(buf2, "%.*o", 5, 20);
s21_sprintf(buf2_, "%.*o", 5, 20);
sprintf(buf3, "%*.*o", 10, 5, 20);
s21_sprintf(buf3_, "%*.*o", 10, 5, 20);
sprintf(buf4, "%020o", 20);
s21_sprintf(buf4_, "%020o", 20);
sprintf(buf5, "%#o", 20);
s21_sprintf(buf5_, "%#o", 20);
ck_assert_str_eq(buf1, buf1_);
ck_assert_str_eq(buf2, buf2_);
ck_assert_str_eq(buf3, buf3_);
ck_assert_str_eq(buf4, buf4_);
ck_assert_str_eq(buf5, buf5_);

#test test_anomal_large_int
char buf1[100];
char buf1_[100];
sprintf(buf1, "%ld", 1234567890000001);
s21_sprintf(buf1_, "%ld", 1234567890000001);
ck_assert_str_eq(buf1, buf1_);

#test test_precision
double number = 127.9991;
char buf1[100];
char buf2[100];

char buf4[100];
char buf5[100];
char buf6[100];
char buf7[100];
char buf1_[100];
char buf2_[100];

char buf4_[100];
char buf5_[100];
char buf6_[100];
char buf7_[100];
sprintf(buf1, "%.*f", 3, number);
s21_sprintf(buf1_, "%.*f", 3, number);
sprintf(buf2, "%.*g", 3, number);
s21_sprintf(buf2_, "%.*g", 3, number);
sprintf(buf4, "%.*f", 0, number);
s21_sprintf(buf4_, "%.*f", 0, number);

number = 127.1991;
sprintf(buf5, "%.*f", 0, number);
s21_sprintf(buf5_, "%.*f", 0, number);
sprintf(buf6, "%.*e", 3, number);
s21_sprintf(buf6_, "%.*e", 3, number);
sprintf(buf7, "%.*e", 0, number);
s21_sprintf(buf7_, "%.*e", 0, number);
ck_assert_str_eq(buf1, buf1_);
ck_assert_str_eq(buf2, buf2_);

ck_assert_str_eq(buf4, buf4_);
ck_assert_str_eq(buf5, buf5_);
ck_assert_str_eq(buf6, buf6_);
ck_assert_str_eq(buf7, buf7_);

#test test_large_int
long int number = 1234567890000000001LL;
char buf1[100];
char buf1_[100];
sprintf(buf1, "%ld", number);
s21_sprintf(buf1_, "%ld", number);
ck_assert_str_eq(buf1, buf1_);

#test test_hash_e
double number = 0.8;
char buf1[100];
char buf1_[100];
char buf2[100];
char buf2_[100];
sprintf(buf1, "%#e", number);
s21_sprintf(buf1_, "%#e", number);
sprintf(buf2, "%#e", 0.0);
s21_sprintf(buf2_, "%#e", 0.0);
ck_assert_str_eq(buf1, buf1_);
ck_assert_str_eq(buf2, buf2_);

#test test_zero_padding
double number = 0.8;
char buf1[100];
char buf2[100];
char buf3[100];
char buf4[100];
char buf5[100];
char buf6[100];
char buf7[100];
char buf8[100];
char buf9[100];
char buf1_[100];
char buf2_[100];
char buf3_[100];
char buf4_[100];
char buf5_[100];
char buf6_[100];
char buf7_[100];
char buf8_[100];
char buf9_[100];
sprintf(buf1, "%08e", number);
s21_sprintf(buf1_, "%08e", number);
sprintf(buf2, "%08f", number);
s21_sprintf(buf2_, "%08f", number);
sprintf(buf3, "%08f", 9.1);
s21_sprintf(buf3_, "%08f", 9.1);
sprintf(buf4, "%08g", number);
s21_sprintf(buf4_, "%08g", number);
sprintf(buf5, "%023g", number);
s21_sprintf(buf5_, "%023g", number);
sprintf(buf6, "%08G", number);
s21_sprintf(buf6_, "%08G", number);
sprintf(buf7, "%023G", number);
s21_sprintf(buf7_, "%023G", number);
sprintf(buf8, "%08d", 10);
s21_sprintf(buf8_, "%08d", 10);
sprintf(buf9, "%023d", 10);
s21_sprintf(buf9_, "%023d", 10);
ck_assert_str_eq(buf1, buf1_);
ck_assert_str_eq(buf2, buf2_);
ck_assert_str_eq(buf3, buf3_);
ck_assert_str_eq(buf4, buf4_);
ck_assert_str_eq(buf5, buf5_);
ck_assert_str_eq(buf6, buf6_);
ck_assert_str_eq(buf7, buf7_);
ck_assert_str_eq(buf8, buf8_);
ck_assert_str_eq(buf9, buf9_);

#test test_mixed_ld
long int number = 1234567890000000001LL;
char buf1[100];
char buf2[100];
char buf1_[100];
char buf2_[100];
sprintf(buf1, "%*.*ld", 5, 8, number);
s21_sprintf(buf1_, "%*.*ld", 5, 8, number);
sprintf(buf2, "%*.*ld", 5, 10, number);
s21_sprintf(buf2_, "%*.*ld", 5, 10, number);
ck_assert_str_eq(buf1, buf1_);
ck_assert_str_eq(buf2, buf2_);

#test test_mixed_f
double num = 12000.9;
char buf1[100];
char buf2[100];
char buf1_[100];
char buf2_[100];
sprintf(buf1, "%0#*.*f", 10, 1, num);
s21_sprintf(buf1_, "%0#*.*f", 10, 1, num);
sprintf(buf2, "%0#*.*f", 10, 14, num);
s21_sprintf(buf2_, "%0#*.*f", 10, 14, num);
ck_assert_str_eq(buf1, buf1_);
ck_assert_str_eq(buf2, buf2_);

#test test_mixed_e
double num = 12000.9;
char buf1[100];
char buf1_[100];
sprintf(buf1, "%0#*.*e", 10, 14, num);
s21_sprintf(buf1_, "%0#*.*e", 10, 14, num);
ck_assert_str_eq(buf1, buf1_);

#test str_error_test
ck_assert_str_eq(s21_strerror(0), strerror(0));
ck_assert_str_eq(s21_strerror(12), strerror(12));
ck_assert_str_eq(s21_strerror(123), strerror(123));
ck_assert_str_eq(s21_strerror(346563), strerror(346563));
ck_assert_str_eq(s21_strerror(-326342), strerror(-326342));