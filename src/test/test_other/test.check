#test s21_negate_1
s21_decimal dec = {{MAX_INT, MAX_INT, MAX_INT, 0}};
s21_decimal res = {0};

int code = s21_negate(dec, &res);
ck_assert_int_eq(code, S21_CALC_OK);

#test s21_negate_2
s21_decimal dec = {{MAX_INT, MAX_INT, MAX_INT, MAX_INT}};
s21_decimal res = {0};

int code = s21_negate(dec, &res);
ck_assert_int_eq(code, S21_CALC_ERR);

#test s21_negate_3
s21_decimal dec = {{1, 1, 1, 0}};
s21_decimal res = {0};

int code = s21_negate(dec, &res);
ck_assert_int_eq(code, S21_CALC_OK);

#test s21_negate_4
s21_decimal dec = {{1, 1, 1, 2147483648}};
s21_decimal res = {0};

int code = s21_negate(dec, &res);
ck_assert_int_eq(code, S21_CALC_OK);

#test s21_negate_5
s21_decimal dec = {{0, 0, 0, 2147483648}};
s21_decimal res = {0};

int code = s21_negate(dec, &res);
ck_assert_int_eq(code, S21_CALC_OK);

#test s21_truncate_1
s21_decimal dec = {{1000, 0, 0, 2147483648}};
s21_decimal res = {0};

int code = s21_truncate(dec, &res);
ck_assert_int_eq(code, S21_CALC_OK);

#test s21_truncate_2
s21_decimal dec = {{100080000, 0, 0, 0}};
s21_decimal res = {0};

int code = s21_truncate(dec, &res);
ck_assert_int_eq(code, S21_CALC_OK);

#test s21_truncate_3
s21_decimal dec = {{0, 0, 0, 0}};
s21_decimal res = {0};

int code = s21_truncate(dec, &res);
ck_assert_int_eq(code, S21_CALC_OK);

#test s21_truncate_4
s21_decimal dec = {{MAX_INT, MAX_INT, MAX_INT, 0}};
s21_decimal res = {0};

int code = s21_truncate(dec, &res);
ck_assert_int_eq(code, S21_CALC_OK);

#test s21_truncate_5
s21_decimal dec = {{MAX_INT, MAX_INT, MAX_INT, MAX_INT}};
s21_decimal res = {0};

int code = s21_truncate(dec, &res);
ck_assert_int_eq(code, S21_CALC_ERR);

#test s21_truncate_6
s21_decimal dec = {{123456, 0, 0, 65536}};
s21_decimal res = {0};

int code = s21_truncate(dec, &res);
ck_assert_int_eq(code, S21_CALC_OK);

#test s21_truncate_E1
// 792281625.14264337593543950335
s21_decimal dec = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x140000}};

int code = s21_truncate(dec, NULL);
ck_assert_int_eq(code, S21_CALC_ERR);

#test s21_truncate_E2
// wrong scale and decimal
s21_decimal dec = {{0, 0, 0, 1000000000}};
s21_decimal res;

int code = s21_truncate(dec, &res);
ck_assert_int_eq(code, S21_CALC_ERR);

#test s21_truncate_E3
// scale 29
s21_decimal decimal = {{-1, 0, 0, 0x1D0000}};
s21_decimal result;

int code = s21_truncate(decimal, &result);
ck_assert_int_eq(code, S21_CALC_ERR);

#test s21_truncate_E4
// scale 28, wrong decimal
s21_decimal decimal = {{-1, 0, 0, 0x1C0001}};
s21_decimal result;

int code = s21_truncate(decimal, &result);
ck_assert_int_eq(code, S21_CALC_ERR);

#test s21_truncate_E5
s21_decimal decimal = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}};
s21_decimal result;

int code = s21_truncate(decimal, &result);
ck_assert_int_eq(code, S21_CALC_ERR);

#test s21_truncate_E6
s21_decimal decimal = {{0x0, 0xAAAAAAAA, 0xAAAAAAAA, 0x801C0000}};
s21_decimal result;

int code = s21_truncate(decimal, &result);
ck_assert_int_eq(code, S21_CALC_OK);

#test s21_truncate_E7
s21_decimal decimal = {{0x1, 0x0, 0x0, 0x80000000}};
s21_decimal result;

int code = s21_truncate(decimal, &result);
ck_assert_int_eq(code, S21_CALC_OK);

#test s21_truncate_E8
// -1
s21_decimal decimal = {{0x1, 0x0, 0x0, 0x80010000}};
s21_decimal result;

int code = s21_truncate(decimal, &result);
ck_assert_int_eq(code, S21_CALC_OK);

#test s21_round_1
s21_decimal dec = {{MAX_INT, MAX_INT, MAX_INT, MAX_INT}};
s21_decimal res = {0};

int code = s21_round(dec, &res);
ck_assert_int_eq(code, S21_CALC_ERR);

#test s21_round_2
s21_decimal dec = {{MAX_INT, MAX_INT, MAX_INT, 0}};
s21_decimal res = {0};

int code = s21_round(dec, &res);
ck_assert_int_eq(code, S21_CALC_OK);

#test s21_round_3
s21_decimal dec = {{12345, 0, 0, 0}};
s21_decimal res = {0};

int code = s21_round(dec, &res);
ck_assert_int_eq(code, S21_CALC_OK);

#test s21_round_4
s21_decimal dec = {{12345, 0, 0, 2147483648}};
s21_decimal res = {0};

int code = s21_round(dec, &res);
ck_assert_int_eq(code, S21_CALC_OK);

#test s21_round_5
// Scale = 8 sign = 0
s21_decimal dec = {.bits = {[3] = 0b00000000000000010000000000000000,
                            [2] = 0b00000000000000001111111111111111,
                            [1] = 0b01111111111111111111111111111111,
                            [0] = 0b11111111111111111111111111111111}};
s21_decimal res = {0};

int code = s21_round(dec, &res);
ck_assert_int_eq(code, S21_CALC_OK);

#test s21_round_6
// Scale = 1 sign = 0
s21_decimal dec = {{123678, 0, 0, 65536}};
s21_decimal res = {0};

int code = s21_round(dec, &res);
ck_assert_int_eq(code, S21_CALC_OK);

#test s21_floor_1
s21_decimal dec = {{MAX_INT, MAX_INT, MAX_INT, MAX_INT}};
s21_decimal res = {0};

int code = s21_floor(dec, &res);
ck_assert_int_eq(code, S21_CALC_ERR);

#test s21_floor_2
s21_decimal dec = {{MAX_INT, MAX_INT, MAX_INT, 0}};
s21_decimal res = {0};

int code = s21_floor(dec, &res);
ck_assert_int_eq(code, S21_CALC_ERR);

#test s21_floor_3
s21_decimal dec = {{12345678, 0, 0, 0}};
s21_decimal res = {0};

int code = s21_floor(dec, &res);
ck_assert_int_eq(code, S21_CALC_ERR);

#test s21_floor_4
s21_decimal dec = {{12345678, 0, 0, 2147483648}};
s21_decimal res = {0};

int code = s21_floor(dec, &res);
ck_assert_int_eq(code, S21_CALC_ERR);

#test s21_floor_5
s21_decimal dec = {.bits = {[3] = 0b10000000000001000000000000000000,
                            [2] = 0b00000000000000001111111111111111,
                            [1] = 0b01111111111111111111111111111111,
                            [0] = 0b11111111111111111111111111111111}};
s21_decimal res = {0};

int code = s21_floor(dec, &res);
ck_assert_int_eq(code, S21_CALC_OK);

#test s21_floor_6
s21_decimal dec = {.bits = {[3] = 0b10000000000001000000000000000000,
                            [2] = 0b00000000000000001111111111111111,
                            [1] = 0b01111111111111111111111111111111,
                            [0] = 0b00000000000000011110001001000000}};
s21_decimal res = {0};

int code = s21_floor(dec, &res);
ck_assert_int_eq(code, S21_CALC_OK);
