#test s21_add_1
s21_decimal dec1 = {{MAX_INT, MAX_INT, MAX_INT, 0}};
s21_decimal dec2 = {{1, 0, 0, 0}};
s21_decimal result = {{0, 0, 0, 0}};

ck_assert_int_eq(s21_add(dec1, dec2, &result), S21_PLUS_INF);

#test s21_add_2
s21_decimal dec1 = {{MAX_INT, MAX_INT, MAX_INT, 2147483648}};
s21_decimal dec2 = {{1, 0, 0, 2147483648}};
s21_decimal result = {{0, 0, 0, 0}};

ck_assert_int_eq(s21_add(dec1, dec2, &result), S21_MINUS_INF);

#test s21_add_3
s21_decimal dec1 = {{MAX_INT, MAX_INT, MAX_INT, 1}};
s21_decimal dec2 = {{1, 0, 0, 1}};
s21_decimal result = {0};

ck_assert_int_eq(s21_add(dec1, dec2, &result), S21_NaN);

#test s21_add_4
s21_decimal dec1 = {{MAX_INT, 0, 1, 128}};
s21_decimal dec2 = {{1, 0, 0, 0}};
s21_decimal result = {{0, 0, 0, 0}};

ck_assert_int_eq(s21_add(dec1, dec2, &result), S21_NaN);

#test s21_add_5
s21_decimal dec1 = {{1, 0, 0, 0}};
s21_decimal dec2 = {{MAX_INT, 0, 1, 128}};
s21_decimal result = {{0, 0, 0, 0}};

ck_assert_int_eq(s21_add(dec1, dec2, &result), S21_NaN);

#test s21_add_6
s21_decimal dec1 = {{1, 2, 0, 0}};
s21_decimal dec2 = {{3, 4, 0, 0}};
s21_decimal result = {{0, 0, 0, 0}};

ck_assert_int_eq(s21_add(dec1, dec2, &result), S21_OK);

#test s21_add_7
s21_decimal dec1 = {{10, 29, 0, 2147483648}};
s21_decimal dec2 = {{30, 49, 0, 0}};
s21_decimal result = {{0, 0, 0, 0}};

ck_assert_int_eq(s21_add(dec1, dec2, &result), S21_OK);

#test s21_add_8
s21_decimal dec1 = {{100, 129, 100, 0}};
s21_decimal dec2 = {{130, 149, 100, 2147483648}};
s21_decimal result = {{0, 0, 0, 0}};

ck_assert_int_eq(s21_add(dec1, dec2, &result), S21_OK);

#test s21_add_9
s21_decimal dec1 = {{1000, 1290, 1000, 2147483648}};
s21_decimal dec2 = {{3300, 1490, 1002, 2147483648}};
s21_decimal result = {{0, 0, 0, 0}};

ck_assert_int_eq(s21_add(dec1, dec2, &result), S21_OK);

#test s21_add_10
// 0.5
s21_decimal dec1 = {{0x5, 0x0, 0x0, 0x10000}};
// 79228162514264337593543950335
s21_decimal dec2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x0}};
s21_decimal result = {{0, 0, 0, 0}};
// overflow
ck_assert_int_eq(s21_add(dec1, dec2, &result), S21_PLUS_INF);

#test s21_add_result_1
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000010}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000011100}};
s21_decimal result = {{0, 0, 0, 0}};

s21_decimal expected_result = {
    .bits = {[3] = 0b00000000000000000000000000000000,
             [2] = 0b00000000000000000000000000000000,
             [1] = 0b00000000000000000000000000000000,
             [0] = 0b00000000000000000000000000011110}};

s21_add(dec1, dec2, &result);
ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test s21_add_result_2
s21_decimal dec1 = {.bits = {[3] = 0b00000000000001000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000010}};
s21_decimal dec2 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000011100}};
s21_decimal result = {{0, 0, 0, 0}};

s21_decimal expected_result = {
    .bits = {[3] = 0b00000000000001000000000000000000,
             [2] = 0b00000000000000000000000000000000,
             [1] = 0b00000000000000000000000000000000,
             [0] = 0b00000000000001000100010111000010}};

s21_add(dec1, dec2, &result);
ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test s21_add_result_3
s21_decimal dec1 = {.bits = {[3] = 0b00000000000001000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000010}};
s21_decimal dec2 = {.bits = {[3] = 0b00000000000001100000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000011100}};
s21_decimal result = {{0, 0, 0, 0}};

s21_decimal expected_result = {
    .bits = {[3] = 0b00000000000001000000000000000000,
             [2] = 0b00000000000000000000000000000000,
             [1] = 0b00000000000000000000000000000000,
             [0] = 0b00000000000000000000000011100100}};

s21_add(dec1, dec2, &result);
ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test s21_add_result_4
s21_decimal dec1 = {.bits = {[3] = 0b00000000000001000000000000000000,
                             [2] = 0b00000000000000001111111111111111,
                             [1] = 0b01111111111111111111111111111111,
                             [0] = 0b11111111111111111111111111111111}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000011000000000000000000,
                             [2] = 0b00001110001111111111111111111111,
                             [1] = 0b01111111111111111111111111111111,
                             [0] = 0b01111111111111111111111111111111}};
s21_decimal result = {{0, 0, 0, 0}};

s21_decimal expected_result = {
    .bits = {[3] = 0b00000000000001000000000000000000,
             [2] = 0b00100111000100000100100111011011,
             [1] = 0b10001000011000100100110111010010,
             [0] = 0b11110001101001101000110111111011}};
s21_add(dec1, dec2, &result);
ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test s21_add_result_5
s21_decimal dec1 = {.bits = {[3] = 0b10000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000111010110111100110100010101}};
s21_decimal dec2 = {.bits = {[3] = 0b10000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000111010110111100110100010101}};
s21_decimal result = {{0, 0, 0, 0}};

s21_decimal expected_result = {
    .bits = {[3] = 0b10000000000000000000000000000000,
             [2] = 0b00000000000000000000000000000000,
             [1] = 0b00000000000000000000000000000000,
             [0] = 0b00001110101101111001101000101010}};
s21_add(dec1, dec2, &result);
ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test s21_add_result_6
s21_decimal dec1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x0}};
// -0.5
s21_decimal dec2 = {{0x5, 0x0, 0x0, 0x80010000}};
// 79228162514264337593543950334
s21_decimal result = {{0}};
s21_decimal expected_result = {{0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0x0}};
s21_add(dec1, dec2, &result);
ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test s21_add_result_7
// 79228162514264337593543950335
s21_decimal dec1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x0}};
// -7922816251426433759354395033.5
s21_decimal dec2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80010000}};
// 71305346262837903834189555302
s21_decimal result = {{0}};
s21_decimal expected_result = {{0x66666666, 0x66666666, 0xE6666666, 0x0}};

s21_add(dec1, dec2, &result);
ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test s21_add_result_8
// 79228162514264337593543950335
s21_decimal dec1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x10000}};
// 7.9228162514264337593543950335
s21_decimal dec2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x1C0000}};
// 7922816251426433759354395041
s21_decimal expected_result = {{0x999999A1, 0x99999999, 0x19999999, 0x1C0000}};
// 79228162514264337593543950335
s21_decimal result = {{0}};
s21_add(dec2, dec1, &result);
ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test s21_add_result_9
// -1
s21_decimal dec1 = {{0x1, 0x0, 0x0, 0x80000000}};
// 1.9999999999999999999999999000
s21_decimal dec2 = {{0x1FFFFC18, 0x7C4A04C2, 0x409F9CBC, 0x1C0000}};
// 0.9999999999999999999999999000
s21_decimal expected_result = {{0xFFFFC18, 0x3E250261, 0x204FCE5E, 0x1C0000}};

s21_decimal result = {{0}};
s21_add(dec2, dec1, &result);
ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test s21_add_result_10
s21_decimal dec1 = {.bits = {[3] 0b00000000000000000000000000000000,
                             [2] 0b00000000000000000000000000000000,
                             [1] 0b00000000000000000000000000000000,
                             [0] 0b00000000000000000000000000000110}};

s21_decimal dec2 = {.bits = {[3] 0b10000000000000000000000000000000,
                             [2] 0b00000000000000000000000000000000,
                             [1] 0b00000000000000000000000000000000,
                             [0] 0b00000000000000000000000000000001}};

s21_decimal expected_result = {
    .bits = {[3] 0b00000000000000000000000000000000,
             [2] 0b00000000000000000000000000000000,
             [1] 0b00000000000000000000000000000000,
             [0] 0b00000000000000000000000000000101}};

s21_decimal result = {0};
s21_add(dec1, dec2, &result);

ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test s21_add_result_11
s21_decimal dec1 = {.bits = {[3] 0b10000000000000000000000000000000,
                             [2] 0b00000000000000000000000000000000,
                             [1] 0b00000000000000000000000000000000,
                             [0] 0b00000000000000000000000000000110}};

s21_decimal dec2 = {.bits = {[3] 0b00000000000000000000000000000000,
                             [2] 0b00000000000000000000000000000000,
                             [1] 0b00000000000000000000000000000000,
                             [0] 0b00000000000000000000000000000001}};

s21_decimal expected_result = {
    .bits = {[3] 0b10000000000000000000000000000000,
             [2] 0b00000000000000000000000000000000,
             [1] 0b00000000000000000000000000000000,
             [0] 0b00000000000000000000000000000101}};

s21_decimal result = {0};
s21_add(dec1, dec2, &result);

ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test s21_add_result_12
s21_decimal dec1 = {.bits = {[3] 0b10000000000000000000000000000000,
                             [2] 0b00000000000000000000000000000000,
                             [1] 0b00000000000000000000000000000000,
                             [0] 0b00000000000000000000000000000110}};

s21_decimal dec2 = {.bits = {[3] 0b00000000000000000000000000000000,
                             [2] 0b00000000000000000000000000000000,
                             [1] 0b00000000000000000000000000000000,
                             [0] 0b00000000000000000000000000000001}};

s21_decimal expected_result = {
    .bits = {[3] 0b10000000000000000000000000000000,
             [2] 0b00000000000000000000000000000000,
             [1] 0b00000000000000000000000000000000,
             [0] 0b00000000000000000000000000000101}};

s21_decimal result = {0};
s21_add(dec2, dec1, &result);

ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test s21_add_result_13
s21_decimal dec1 = {.bits = {[3] 0b00000000000000000000000000000000,
                             [2] 0b11110000000000000000000000000000,
                             [1] 0b00000000000000000000000000000000,
                             [0] 0b00000000000000000000000000000110}};

s21_decimal dec2 = {.bits = {[3] 0b00000000000000000000000000000000,
                             [2] 0b10000000000000000000000000000000,
                             [1] 0b00000000000000000000000000000000,
                             [0] 0b00000000000000000000000000000001}};

s21_decimal expected_result = {{MAX_INT, MAX_INT, MAX_INT, MAX_INT}};

s21_decimal result = {0};
s21_add(dec2, dec1, &result);

ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);
ck_assert_int_eq(s21_add(dec2, dec1, &result), S21_PLUS_INF);

#test s21_add_result_14
s21_decimal dec1 = {.bits = {[3] 0b10000000000000000000000000000000,
                             [2] 0b10000000000000000000000000000000,
                             [1] 0b00000000000000000000000000000000,
                             [0] 0b00000000000000000000000000000000}};

s21_decimal dec2 = {.bits = {[3] 0b10000000000000000000000000000000,
                             [2] 0b10000000000000000000000000000000,
                             [1] 0b00000000000000000000000000000000,
                             [0] 0b00000000000000000000000000000000}};

s21_decimal expected_result = {{0, 0, 0, 0}};

s21_decimal result = {0};
s21_add(dec2, dec1, &result);

ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);
ck_assert_int_eq(s21_add(dec2, dec1, &result), S21_MINUS_INF);

#test s21_sub_1
s21_decimal dec1 = {{MAX_INT, MAX_INT, MAX_INT, 0}};
s21_decimal dec2 = {{1, 0, 0, 2147483648}};
s21_decimal result = {{0, 0, 0, 0}};

ck_assert_int_eq(s21_sub(dec1, dec2, &result), S21_PLUS_INF);

#test s21_sub_2
s21_decimal dec1 = {{MAX_INT, MAX_INT, MAX_INT, 2147483648}};
s21_decimal dec2 = {{MAX_INT, MAX_INT, MAX_INT, 0}};
s21_decimal result = {{0, 0, 0, 0}};

ck_assert_int_eq(s21_sub(dec1, dec2, &result), S21_MINUS_INF);

#test s21_sub_3
s21_decimal dec1 = {{MAX_INT, MAX_INT, MAX_INT, 1}};
s21_decimal dec2 = {{1, 0, 0, 1}};
s21_decimal result = {0};

ck_assert_int_eq(s21_sub(dec1, dec2, &result), S21_NaN);

#test s21_sub_4
s21_decimal dec1 = {{MAX_INT, 0, 1, 128}};
s21_decimal dec2 = {{1, 0, 0, 0}};
s21_decimal result = {{0, 0, 0, 0}};

ck_assert_int_eq(s21_sub(dec1, dec2, &result), S21_NaN);

#test s21_sub_5
s21_decimal dec1 = {{1, 0, 0, 0}};
s21_decimal dec2 = {{MAX_INT, 0, 1, 128}};
s21_decimal result = {{0, 0, 0, 0}};

ck_assert_int_eq(s21_sub(dec1, dec2, &result), S21_NaN);

#test s21_sub_6
s21_decimal dec1 = {{1, 2, 0, 0}};
s21_decimal dec2 = {{3, 4, 0, 0}};
s21_decimal result = {{0, 0, 0, 0}};

ck_assert_int_eq(s21_sub(dec1, dec2, &result), S21_OK);

#test s21_sub_7
s21_decimal dec1 = {{10, 29, 0, 2147483648}};
s21_decimal dec2 = {{30, 49, 0, 0}};
s21_decimal result = {{0, 0, 0, 0}};

ck_assert_int_eq(s21_sub(dec1, dec2, &result), S21_OK);

#test s21_sub_8
s21_decimal dec1 = {{100, 129, 100, 0}};
s21_decimal dec2 = {{130, 149, 100, 2147483648}};
s21_decimal result = {{0, 0, 0, 0}};

ck_assert_int_eq(s21_sub(dec1, dec2, &result), S21_OK);

#test s21_sub_9
s21_decimal dec1 = {{1000, 1290, 1000, 2147483648}};
s21_decimal dec2 = {{3300, 1490, 1002, 2147483648}};
s21_decimal result = {{0, 0, 0, 0}};

ck_assert_int_eq(s21_sub(dec1, dec2, &result), S21_OK);

#test s21_sub_result_1
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000010000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000011110}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000010}};
s21_decimal result = {{0, 0, 0, 0}};

s21_decimal expected_result = {
    .bits = {[3] = 0b00000000000000010000000000000000,
             [2] = 0b00000000000000000000000000000000,
             [1] = 0b00000000000000000000000000000000,
             [0] = 0b00000000000000000000000000001010}};
s21_sub(dec1, dec2, &result);
ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test s21_sub_result_2
s21_decimal dec1 = {.bits = {[3] = 0b10000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b11111111111111111111110001010100}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b11111111111111111111111101010100}};
s21_decimal result = {{0, 0, 0, 0}};

s21_decimal expected_result = {
    .bits = {[3] = 0b10000000000000000000000000000000,
             [2] = 0b00000000000000000000000000000000,
             [1] = 0b00000000000000000000000000000001,
             [0] = 0b11111111111111111111101110101000}};
s21_sub(dec1, dec2, &result);
ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test s21_sub_result_3
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000111010110111100110100010101}};

s21_decimal dec2 = {.bits = {[3] = 0b10000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000111010110111100110100010101}};
s21_decimal result = {{0, 0, 0, 0}};

s21_decimal expected_result = {
    .bits = {[3] = 0b00000000000000000000000000000000,
             [2] = 0b00000000000000000000000000000000,
             [1] = 0b00000000000000000000000000000000,
             [0] = 0b00001110101101111001101000101010}};
s21_sub(dec1, dec2, &result);
ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test s21_sub_result_4
s21_decimal dec1 = {.bits = {[3] = 0b10000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b11111111111111111111111101010100}};

s21_decimal dec2 = {.bits = {[3] = 0b10000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b11111111111111111111110001010100}};
s21_decimal result = {{0, 0, 0, 0}};

s21_decimal expected_result = {
    .bits = {[3] = 0b10000000000000000000000000000000,
             [2] = 0b00000000000000000000000000000000,
             [1] = 0b00000000000000000000000000000000,
             [0] = 0b00000000000000000000001100000000}};
s21_sub(dec1, dec2, &result);
ck_assert_int_eq(s21_sub(dec1, dec2, &result), S21_OK);
ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test bank_round_sub_1
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b11111111111111111111111111111111,
                             [1] = 0b11111111111111111111111111111111,
                             [0] = 0b11111111111111111111111111111111}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000000010000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000110}};
s21_decimal result = {{0}};

s21_sub(dec1, dec2, &result);

s21_decimal expected_result = {
    .bits = {[3] = 0b00000000000000000000000000000000,
             [2] = 0b11111111111111111111111111111111,
             [1] = 0b11111111111111111111111111111111,
             [0] = 0b11111111111111111111111111111110}};

ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test bank_round_sub_2
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b11111111111111111111111111111111,
                             [1] = 0b11111111111111111111111111111111,
                             [0] = 0b11111111111111111111111111111111}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000000010000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000001111}};
s21_decimal result = {{0}};

s21_sub(dec1, dec2, &result);

s21_decimal expected_result = {
    .bits = {[3] = 0b00000000000000000000000000000000,
             [2] = 0b11111111111111111111111111111111,
             [1] = 0b11111111111111111111111111111111,
             [0] = 0b11111111111111111111111111111110}};

ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test bank_round_add_1
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b11111111111111111111111111111111,
                             [1] = 0b11111111111111111111111111111111,
                             [0] = 0b11111111111111111111111111111111}};

s21_decimal dec2 = {.bits = {[3] = 0b10000000000000010000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000110}};
s21_decimal result = {{0}};

s21_add(dec1, dec2, &result);

s21_decimal expected_result = {
    .bits = {[3] = 0b00000000000000000000000000000000,
             [2] = 0b11111111111111111111111111111111,
             [1] = 0b11111111111111111111111111111111,
             [0] = 0b11111111111111111111111111111110}};

ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test bank_round_add_2
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b11111111111111111111111111111111,
                             [1] = 0b11111111111111111111111111111111,
                             [0] = 0b11111111111111111111111111111111}};

s21_decimal dec2 = {.bits = {[3] = 0b10000000000000010000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000001111}};
s21_decimal result = {{0}};

s21_add(dec1, dec2, &result);

s21_decimal expected_result = {
    .bits = {[3] = 0b00000000000000000000000000000000,
             [2] = 0b11111111111111111111111111111111,
             [1] = 0b11111111111111111111111111111111,
             [0] = 0b11111111111111111111111111111110}};

ck_assert_int_eq(result.bits[0], expected_result.bits[0]);
ck_assert_int_eq(result.bits[1], expected_result.bits[1]);
ck_assert_int_eq(result.bits[2], expected_result.bits[2]);
ck_assert_int_eq(result.bits[3], expected_result.bits[3]);

#test mul_normal_1
s21_decimal dec1 = {{10, 0, 0, 0}};
s21_decimal dec2 = {{10, 0, 0, 0}};
s21_decimal ans = {{100, 0, 0, 0}};
s21_decimal res = {{0, 0, 0, 0}};

int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(res, ans), 1);
ck_assert_int_eq(err, 0);

#test mul_normal_2
s21_decimal dec1 = {{0, 0, 0, 0}};
s21_decimal dec2 = {{10, 0, 0, 0}};
s21_decimal ans = {{0, 0, 0, 0}};
s21_decimal res = {{0, 0, 0, 0}};

int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(res, ans), 1);
ck_assert_int_eq(err, 0);

#test mul_normal_3
s21_decimal dec1 = {{10, 0, 0, 0}};
s21_decimal dec2 = {{0, 0, 0, 0}};
s21_decimal ans = {{0, 0, 0, 0}};
s21_decimal res = {{0, 0, 0, 0}};

int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(res, ans), 1);
ck_assert_int_eq(err, 0);

#test mul_normal_4
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000001,
                             [0] = 0b00000000000000000000000000000000}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000001,
                             [0] = 0b00000000000000000000000000000000}};

s21_decimal ans = {.bits = {[3] = 0b00000000000000000000000000000000,
                            [2] = 0b00000000000000000000000000000001,
                            [1] = 0b00000000000000000000000000000000,
                            [0] = 0b00000000000000000000000000000000}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_normal_5
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b01000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000000}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000010}};

s21_decimal ans = {.bits = {[3] = 0b00000000000000000000000000000000,
                            [2] = 0b10000000000000000000000000000000,
                            [1] = 0b00000000000000000000000000000000,
                            [0] = 0b00000000000000000000000000000000}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_normal_6
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b11111111111111111111111111111111}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b11111111111111111111111111111111}};

s21_decimal ans = {.bits = {[3] = 0b00000000000000000000000000000000,
                            [2] = 0b00000000000000000000000000000000,
                            [1] = 0b11111111111111111111111111111110,
                            [0] = 0b00000000000000000000000000000001}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_normal_7
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000011}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000001}};

s21_decimal ans = {.bits = {[3] = 0b00000000000000000000000000000000,
                            [2] = 0b00000000000000000000000000000000,
                            [1] = 0b00000000000000000000000000000000,
                            [0] = 0b00000000000000000000000000000011}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_normal_8
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000001}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000010}};

s21_decimal ans = {.bits = {[3] = 0b00000000000000000000000000000000,
                            [2] = 0b00000000000000000000000000000000,
                            [1] = 0b00000000000000000000000000000000,
                            [0] = 0b00000000000000000000000000000010}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_normal_9
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00001101101001110001101110000010,
                             [1] = 0b01101110100001101101101101110111,
                             [0] = 0b00110110100111011000000111010100}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000001010}};

s21_decimal ans = {.bits = {[3] = 0b00000000000000000000000000000000,
                            [2] = 0b10001000100001110001001100011000,
                            [1] = 0b01010001010001001001001010101000,
                            [0] = 0b00100010001001110001001001001000}};

s21_decimal res = {{0, 0, 0, 0}};

int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_normal_10
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000001011101,
                             [0] = 0b11000000000000000000000000000000}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b11110000000000000000000000000001}};

s21_decimal ans = {.bits = {[3] = 0b00000000000000000000000000000000,
                            [2] = 0b00000000000000000000000001010111,
                            [1] = 0b11100100000000000000000001011101,
                            [0] = 0b11000000000000000000000000000000}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_nigate_1
s21_decimal dec1 = {.bits = {[3] = 0b10000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000100}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000001000}};

s21_decimal ans = {.bits = {[3] = 0b10000000000000000000000000000000,
                            [2] = 0b00000000000000000000000000000000,
                            [1] = 0b00000000000000000000000000000000,
                            [0] = 0b00000000000000000000000000100000}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_nigate_2
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000001011101,
                             [0] = 0b11000000000000000000000000000000}};

s21_decimal dec2 = {.bits = {[3] = 0b10000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b11110000000000000000000000000001}};

s21_decimal ans = {.bits = {[3] = 0b10000000000000000000000000000000,
                            [2] = 0b00000000000000000000000001010111,
                            [1] = 0b11100100000000000000000001011101,
                            [0] = 0b11000000000000000000000000000000}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_nigate_3
s21_decimal dec1 = {.bits = {[3] = 0b10000000000000000000000000000000,
                             [2] = 0b00001101101001110001101110000010,
                             [1] = 0b01101110100001101101101101110111,
                             [0] = 0b00110110100111011000000111010100}};

s21_decimal dec2 = {.bits = {[3] = 0b10000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000001010}};

s21_decimal ans = {.bits = {[3] = 0b00000000000000000000000000000000,
                            [2] = 0b10001000100001110001001100011000,
                            [1] = 0b01010001010001001001001010101000,
                            [0] = 0b00100010001001110001001001001000}};

s21_decimal res = {{0, 0, 0, 0}};

int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_nigate_4
s21_decimal dec1 = {.bits = {[3] = 0b10000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000000}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000011}};

s21_decimal ans = {.bits = {[3] = 0b00000000000000000000000000000000,
                            [2] = 0b00000000000000000000000000000000,
                            [1] = 0b00000000000000000000000000000000,
                            [0] = 0b00000000000000000000000000000000}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_nigate_5
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000011}};

s21_decimal dec2 = {.bits = {[3] = 0b10000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000001}};

s21_decimal ans = {.bits = {[3] = 0b10000000000000000000000000000000,
                            [2] = 0b00000000000000000000000000000000,
                            [1] = 0b00000000000000000000000000000000,
                            [0] = 0b00000000000000000000000000000011}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_scale_1
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000110000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000111}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000001}};

s21_decimal ans = {.bits = {[3] = 0b00000000000000110000000000000000,
                            [2] = 0b00000000000000000000000000000000,
                            [1] = 0b00000000000000000000000000000000,
                            [0] = 0b00000000000000000000000000000111}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_scale_2
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000110000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000111}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000000100000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000001}};

s21_decimal ans = {.bits = {[3] = 0b00000000000001010000000000000000,
                            [2] = 0b00000000000000000000000000000000,
                            [1] = 0b00000000000000000000000000000000,
                            [0] = 0b00000000000000000000000000000111}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_scale_3
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000111}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000001100000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000111}};

s21_decimal ans = {.bits = {[3] = 0b00000000000001100000000000000000,
                            [2] = 0b00000000000000000000000000000000,
                            [1] = 0b00000000000000000000000000000000,
                            [0] = 0b00000000000000000000000000110001}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_scale_4
s21_decimal dec1 = {.bits = {[3] = 0b00000000000101000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000111}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000010000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000001}};

s21_decimal ans = {.bits = {[3] = 0b00000000000111000000000000000000,
                            [2] = 0b00000000000000000000000000000000,
                            [1] = 0b00000000000000000000000000000000,
                            [0] = 0b00000000000000000000000000000111}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_scale_5
s21_decimal dec1 = {.bits = {[3] = 0b00000000000101000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000010000000}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000010000000000000000000,
                             [2] = 0b10000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000000}};

s21_decimal ans = {.bits = {[3] = 0b00000000000110100000000000000000,
                            [2] = 0b10100011110101110000101000111101,
                            [1] = 0b01110000101000111101011100001010,
                            [0] = 0b00111101011100001010001111010111}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_scale_nigate_1
s21_decimal dec1 = {.bits = {[3] = 0b10000000000101000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000010000000}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000010000000000000000000,
                             [2] = 0b10000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000000}};

s21_decimal ans = {.bits = {[3] = 0b10000000000110100000000000000000,
                            [2] = 0b10100011110101110000101000111101,
                            [1] = 0b01110000101000111101011100001010,
                            [0] = 0b00111101011100001010001111010111}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_scale_nigate_2
s21_decimal dec1 = {.bits = {[3] = 0b10000000000101000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000011000001}};

s21_decimal dec2 = {.bits = {[3] = 0b10000000000010000000000000000000,
                             [2] = 0b10000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000000}};

s21_decimal ans = {.bits = {[3] = 0b00000000000110100000000000000000,
                            [2] = 0b11110111000010100011110101110000,
                            [1] = 0b10100011110101110000101000111101,
                            [0] = 0b01110000101000111101011100001010}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_scale_nigate_3
s21_decimal dec1 = {.bits = {[3] = 0b10000000000101000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000011100000011100011000001}};

s21_decimal dec2 = {.bits = {[3] = 0b10000000000010100000000000000000,
                             [2] = 0b10000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000000}};

s21_decimal ans = {.bits = {[3] = 0b00000000000101110000000000000000,
                            [2] = 0b01011110001000110110110011101100,
                            [1] = 0b10010010011001001111000111110010,
                            [0] = 0b00100000010000110110110001100110}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_scale_nigate_4
s21_decimal dec1 = {.bits = {[3] = 0b00000000000101000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00001111011100000011100011000001}};

s21_decimal dec2 = {.bits = {[3] = 0b10000000000011100000000000000000,
                             [2] = 0b10000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000000}};

s21_decimal ans = {.bits = {[3] = 0b10000000000110010000000000000000,
                            [2] = 0b00100001001001110101010011011010,
                            [1] = 0b11000101001010100110001101111000,
                            [0] = 0b01000001110100100111111110110111}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_scale_nigate_5
s21_decimal dec1 = {.bits = {[3] = 0b00000000000111000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000001,
                             [0] = 0b00000000000000000000000000000000}};

s21_decimal dec2 = {.bits = {[3] = 0b10000000000000100000000000000000,
                             [2] = 0b10000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000000}};

s21_decimal ans = {.bits = {[3] = 0b10000000000101000000000000000000,
                            [2] = 0b00110110111110011011111110110011,
                            [1] = 0b10101111011110110111010101101111,
                            [0] = 0b10101101010111001101000100000100}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(s21_is_equal(ans, res), 1);
ck_assert_int_eq(err, 0);

#test mul_err_1
s21_decimal dec1 = {.bits = {[3] = 0b00000000000111000000000000000011,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000001,
                             [0] = 0b00000000000000000000000000000000}};

s21_decimal dec2 = {.bits = {[3] = 0b10000000000000100000000000000000,
                             [2] = 0b10000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000000}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(err, 3);

#test mul_err_2
s21_decimal dec1 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b11111111111111111111111111111111,
                             [1] = 0b11111111111111111111111111111111,
                             [0] = 0b11111111111111111111111111111111}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000000000000000000000000,
                             [2] = 0b11111111111111111111111111111111,
                             [1] = 0b11111111111111111111111111111111,
                             [0] = 0b11111111111111111111111111111111}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(err, 1);

#test mul_err_3
s21_decimal dec1 = {.bits = {[3] = 0b00000000000111000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000001}};

s21_decimal dec2 = {.bits = {[3] = 0b00000000000111000000000000000000,
                             [2] = 0b00000000000000000000000000000000,
                             [1] = 0b00000000000000000000000000000000,
                             [0] = 0b00000000000000000000000000000001}};

s21_decimal res = {{0, 0, 0, 0}};
int err = s21_mul(dec1, dec2, &res);

ck_assert_int_eq(err, 2);

#test div1
int value_1 = 12, value_2 = 2, result = 0, expected = 6;
s21_decimal value_1_decimal = {0}, value_2_decimal = {0}, value_3_decimal = {0};

s21_from_int_to_decimal(value_1, &value_1_decimal);
s21_from_int_to_decimal(value_2, &value_2_decimal);

s21_div(value_1_decimal, value_2_decimal, &value_3_decimal);

s21_from_decimal_to_int(value_3_decimal, &result);

ck_assert_float_eq_tol(result, expected, 0.001);

#test div2
float value_1 = 0.6f, value_2 = 0.6f, result = 0.0f, expected = 1.0f;
s21_decimal value_1_decimal = {0}, value_2_decimal = {0}, value_3_decimal = {0};

s21_from_float_to_decimal(value_1, &value_1_decimal);
s21_from_float_to_decimal(value_2, &value_2_decimal);

s21_div(value_1_decimal, value_2_decimal, &value_3_decimal);

s21_from_decimal_to_float(value_3_decimal, &result);

ck_assert_float_eq_tol(result, expected, 0.001);

#test div3
float result = 0.0f, expected = -2.0f;

s21_decimal d_1 = {{60, 0, 0, 0}}, d_2 = {{3, 0, 0, 0}};
s21_decimal_set_scale(&d_1, 2);
s21_decimal_set_scale(&d_2, 1);

s21_decimal_set_sign(&d_1, 1);

s21_decimal d_3 = {0};

s21_div(d_1, d_2, &d_3);

s21_from_decimal_to_float(d_3, &result);

ck_assert_float_eq_tol(result, expected, 0.001);

#test div4
s21_decimal res = {0};
s21_decimal a = {10};
s21_decimal b = {3};
int err = s21_div(a, b, &res);
ck_assert_int_eq(err, 0);
